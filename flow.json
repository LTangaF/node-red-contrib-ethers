[{"id":"a3dd7976.9afb18","type":"tab","label":"Flow 1","disabled":false,"info":""},{"id":"2ae022aa.e8c26e","type":"inject","z":"a3dd7976.9afb18","name":"","topic":"","payload":"{}","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":110,"y":240,"wires":[["41257b74.18ea24"]]},{"id":"d2682278.e60c8","type":"debug","z":"a3dd7976.9afb18","name":"Approve DAI","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":410,"y":180,"wires":[]},{"id":"41257b74.18ea24","type":"function","z":"a3dd7976.9afb18","name":"Call ethToTokenSwapInput on Uniswap","func":"ethers = global.get(\"ethers\");\n\nlet abi = flow.get(\"abi_uniswap_exchange\");\n\netherAmount = ethers.utils.parseEther('1');\nmimToken = ethers.utils.parseEther('10');\n\nmsg.payload.config = {\n  \"contractAddress\" : flow.get(\"contract_address_dai_exchange\"),\n  abi,\n  \"pk\" : flow.get(\"deployer_pk\"),\n  \"apiCall\" : \"ethToTokenSwapInput\",\n  \"value\" : etherAmount,\n  \"args\" : [mimToken, ethers.utils.parseEther('100')]\n};\nreturn msg;\n\n","outputs":1,"noerr":0,"x":400,"y":240,"wires":[["d2682278.e60c8","feb0a544.6e8a28"]]},{"id":"1da36d1e.bf57d3","type":"debug","z":"a3dd7976.9afb18","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":990,"y":240,"wires":[]},{"id":"feb0a544.6e8a28","type":"function","z":"a3dd7976.9afb18","name":"Contract Executor ","func":"ethers = global.get('ethers');\nlet network  = flow.get(\"network\");\n\nlet { pk, contractAddress, apiCall, args, abi, byteCode, value } = msg.payload.config;\nconst provider = ethers.getDefaultProvider(network);\n\nlet wallet;\nlet contract;\n\nif(pk){\n    wallet = new ethers.Wallet(pk, provider);\n    contract = new ethers.Contract(contractAddress, abi, wallet);\n}else{\n    // read only\n    contract = new ethers.Contract(contractAddress, abi, provider);\n}\n\n// All overrides are optional\nlet overrides = {\n    // The maximum units of gas for the transaction to use\n    gasLimit: 1000000,\n\n    // The price (in wei) per unit of gas\n   // gasPrice: ethers.utils.parseUnits('9.0', 'gwei'),\n    // value: ethers.utils.parseEther('1')\n};\n\nif(value){\n    overrides.value = value;\n}\nargs.push(overrides);\n\n\nlet func = contract[apiCall];\nasync function process () {\n    try{\n        let resp = await func.apply(node, args);\n        // msg.payload.trxHash = resp.hash;\n        msg.payload.response = resp;\n    }catch(error){\n        msg.payload.error = error;\n    }\n    node.send(msg, false);\n    node.done();\n    return;\n}\n\nprocess();\n\nreturn;","outputs":1,"noerr":0,"x":730,"y":240,"wires":[["1da36d1e.bf57d3"]]},{"id":"dfa67679.8bf8a8","type":"comment","z":"a3dd7976.9afb18","name":"swap eth to dai token","info":"","x":120,"y":140,"wires":[]}]